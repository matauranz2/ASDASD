cannot open file 'topography.xyz': No such file or directory
>
> # Or for CSV files:
> xyz_data <- read.csv("topography.csv", header = FALSE, col.names = c("x", "y", "z"))
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
cannot open file 'topography.csv': No such file or directory
>
> # Inspect the data
> head(xyz_data)
Error: object 'xyz_data' not found
> summary(xyz_data)
Error: object 'xyz_data' not found
>
>
# Read XYZ data from a text file
xyz_data <- read.table("topography.xyz", header = FALSE, col.names = c("x", "y", "z"))
# Or for CSV files:
xyz_data <- read.csv("topography.csv", header = FALSE, col.names = c("x", "y", "z"))
# Inspect the data
head(xyz_data)
summary(xyz_data)
# Load required packages
library(ggplot2)
library(raster)
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
# 3. Create Digital Elevation Model (DEM)
coordinates(topo_data) <- ~X+Y  # Convert to spatial object
# Create raster template with 5m resolution (adjust as needed)
raster_template <- raster(extent(topo_data), resolution = 5)
crs(raster_template) <- CRS("+init=EPSG:32633")  # UTM Zone 33N
# Interpolate using inverse distance weighting
dem <- rasterize(topo_data, raster_template, field = "Z", fun = mean)
# 4. Terrain analysis
slope <- terrain(dem, opt = "slope", unit = "degrees")
aspect <- terrain(dem, opt = "aspect", unit = "degrees")
hillshade <- hillShade(slope, aspect, angle = 45, direction = 315)
# 5. Visualize terrain
par(mfrow = c(2, 2))
plot(dem, main = "Elevation (m)")
plot(slope, main = "Slope (degrees)")
plot(aspect, main = "Aspect (degrees)")
plot(hillshade, col = gray(0:100/100), main = "Hillshade")
# 6. Create contour lines
contour_interval <- 0.5  # meters between contours
contours <- rasterToContour(dem, levels = seq(floor(minValue(dem)),
ceiling(maxValue(dem)),
by = contour_interval))
# 7. Enhanced ggplot visualization
ggplot() +
geom_raster(data = as.data.frame(dem, xy = TRUE),
aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = terrain.colors(10),
name = "Elevation (m)") +
geom_path(data = contours, aes(x = long, y = lat, group = group),
color = "black", size = 0.3) +
geom_point(data = as.data.frame(topo_data),
aes(x = X, y = Y), color = "red", size = 0.5) +
coord_equal() +
labs(title = "Topographic Map with Survey Points",
x = "Easting (m)", y = "Northing (m)") +
theme_minimal()
# 8. Interactive 3D visualization
plot_ly(x = topo_data$X, y = topo_data$Y, z = topo_data$Z,
type = "scatter3d", mode = "markers",
marker = list(size = 3, color = topo_data$Z,
colorscale = "Viridis", showscale = TRUE)) %>%
layout(scene = list(xaxis = list(title = "Easting (m)"),
yaxis = list(title = "Northing (m)"),
zaxis = list(title = "Elevation (m)")))
# 9. Extract profile along a transect
transect <- SpatialLines(list(Lines(list(Line(cbind(c(min(topo_data$X), max(topo_data$X)),
c(mean(topo_data$Y), mean(topo_data$Y))))), ID = "1")))
profile <- extract(dem, transect, along = TRUE)[[1]]
plot(profile, type = "l", lwd = 2,
xlab = "Distance along transect (m)", ylab = "Elevation (m)",
main = "Elevation Profile")
grid()
# 10. Export results
writeRaster(dem, "output_dem.tif", format = "GTiff", overwrite = TRUE)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
setRepositories()
utils:::menuInstallPkgs()
write.csv(as.data.frame(topo_data), "processed_topography.csv", row.names = FALSE)
# Load required packages
library(ggplot2)
library(raster)
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
# 3. Create Digital Elevation Model (DEM)
coordinates(topo_data) <- ~X+Y  # Convert to spatial object
# Create raster template with 5m resolution (adjust as needed)
raster_template <- raster(extent(topo_data), resolution = 5)
crs(raster_template) <- CRS("+init=EPSG:32633")  # UTM Zone 33N
# Interpolate using inverse distance weighting
dem <- rasterize(topo_data, raster_template, field = "Z", fun = mean)
# 4. Terrain analysis
slope <- terrain(dem, opt = "slope", unit = "degrees")
aspect <- terrain(dem, opt = "aspect", unit = "degrees")
hillshade <- hillShade(slope, aspect, angle = 45, direction = 315)
# 5. Visualize terrain
par(mfrow = c(2, 2))
plot(dem, main = "Elevation (m)")
plot(slope, main = "Slope (degrees)")
plot(aspect, main = "Aspect (degrees)")
plot(hillshade, col = gray(0:100/100), main = "Hillshade")
# 6. Create contour lines
contour_interval <- 0.5  # meters between contours
contours <- rasterToContour(dem, levels = seq(floor(minValue(dem)),
ceiling(maxValue(dem)),
by = contour_interval))
# 7. Enhanced ggplot visualization
ggplot() +
geom_raster(data = as.data.frame(dem, xy = TRUE),
aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = terrain.colors(10),
name = "Elevation (m)") +
geom_path(data = contours, aes(x = long, y = lat, group = group),
color = "black", size = 0.3) +
geom_point(data = as.data.frame(topo_data),
aes(x = X, y = Y), color = "red", size = 0.5) +
coord_equal() +
labs(title = "Topographic Map with Survey Points",
x = "Easting (m)", y = "Northing (m)") +
theme_minimal()
# 8. Interactive 3D visualization
plot_ly(x = topo_data$X, y = topo_data$Y, z = topo_data$Z,
type = "scatter3d", mode = "markers",
marker = list(size = 3, color = topo_data$Z,
colorscale = "Viridis", showscale = TRUE)) %>%
layout(scene = list(xaxis = list(title = "Easting (m)"),
yaxis = list(title = "Northing (m)"),
zaxis = list(title = "Elevation (m)")))
# 9. Extract profile along a transect
transect <- SpatialLines(list(Lines(list(Line(cbind(c(min(topo_data$X), max(topo_data$X)),
c(mean(topo_data$Y), mean(topo_data$Y))))), ID = "1")))
profile <- extract(dem, transect, along = TRUE)[[1]]
plot(profile, type = "l", lwd = 2,
xlab = "Distance along transect (m)", ylab = "Elevation (m)",
main = "Elevation Profile")
grid()
# 10. Export results
writeRaster(dem, "output_dem.tif", format = "GTiff", overwrite = TRUE)
write.csv(as.data.frame(topo_data), "processed_topography.csv", row.names = FALSE)
library(sf)
library(raster)
library(ggplot2)
# Read CSV data and convert to SF object with NZTM CRS
topo_data <- read.csv("topography.csv") %>%
st_as_sf(coords = c("X", "Y"), crs = 2193)  # EPSG:2193 is NZTM
# Check CRS
st_crs(topo_data)  # Should show NZTM
library(sf)
library(raster)
library(ggplot2)
# Read CSV data and convert to SF object with NZTM CRS
topo_data <- read.csv("topography.csv") %>%
st_as_sf(coords = c("X", "Y"), crs = 2193)  # EPSG:2193 is NZTM
# Check CRS
st_crs(topo_data)  # Should show NZTM
# Convert raster to data frame
dem_df <- as.data.frame(dem, xy = TRUE)
ggplot() +
geom_raster(data = dem_df, aes(x = x, y = y, fill = layer)) +
scale_fill_gradientn(colors = terrain.colors(10), name = "Elevation (m)") +
geom_sf(data = topo_data, color = "red", size = 1) +
labs(title = "NZTM Topographic Map",
x = "Easting (NZTM)",
y = "Northing (NZTM)") +
coord_sf(crs = st_crs(2193))  # Ensures proper NZTM projection
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
q()
history
history()
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
topo_data
# Open file browser to select CSV
file_path <- file.choose()
# Read the selected file
xyz_data <- read.csv(file_path)
# View the first few rows
head(xyz_data)
# Check column names (should contain X, Y, Z)
names(xyz_data)
# Calculate reference line endpoints
start_point <- c(xyz_data$X[1], xyz_data$Y[1])
end_point <- c(xyz_data$X[nrow(xyz_data)], xyz_data$Y[nrow(xyz_data)])
# Create plot
plot(xyz_data$X, xyz_data$Y,
main = "XY Plot with Reference Line",
xlab = "X", ylab = "Y",
pch = 16, col = "blue")
grid()
# Add reference line (red dashed line)
segments(start_point[1], start_point[2],
end_point[1], end_point[2],
col = "red", lwd = 2, lty = 2)
# Mark endpoints
points(start_point[1], start_point[2], pch = 4, col = "red", cex = 2, lwd = 2)
points(end_point[1], end_point[2], pch = 4, col = "red", cex = 2, lwd = 2)
library(ggplot2)
ggplot(xyz_data, aes(x = X, y = Y)) +
# Original points
geom_point(color = "blue", size = 2) +
# Reference line (1st to last point)
geom_segment(aes(x = X[1], y = Y[1],
xend = X[nrow(xyz_data)], yend = Y[nrow(xyz_data)]),
color = "red", linewidth = 1, linetype = "dashed") +
# Endpoint markers
geom_point(data = xyz_data[c(1, nrow(xyz_data)), ],
aes(x = X, y = Y),
color = "red", shape = 4, size = 4) +
# Labels
labs(title = "XY Plot with Reference Line",
subtitle = "Red dashed line connects first and last points",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal() +
coord_equal()
library(ggplot2)
library(dplyr)
# 1. Define reference line (start to end)
start_point <- c(xyz_data$X[1], xyz_data$Y[1])
end_point <- c(xyz_data$X[nrow(xyz_data)], xyz_data$Y[nrow(xyz_data)])
# 2. Vector math functions for projection
project_point <- function(point, line_start, line_end) {
ap <- point - line_start
ab <- line_end - line_start
t <- sum(ap * ab) / sum(ab * ab) # projection scalar
projected <- line_start + t * ab
return(projected)
}
calculate_chainage <- function(projected, line_start) {
sqrt(sum((projected - line_start)^2)) # Euclidean distance
}
# 3. Calculate projections and chainage
xyz_data <- xyz_data %>%
rowwise() %>%
mutate(
projected = list(project_point(c(X, Y), start_point, end_point)),
proj_X = projected[1],
proj_Y = projected[2],
chainage = calculate_chainage(projected, start_point)
) %>%
select(-projected) # clean up
# 4. Plot results
ggplot(xyz_data) +
# Reference line
geom_segment(aes(x = start_point[1], y = start_point[2],
xend = end_point[1], yend = end_point[2]),
color = "red", linewidth = 1) +
# Original points
geom_point(aes(x = X, y = Y), color = "blue", size = 2) +
# Projected points
geom_point(aes(x = proj_X, y = proj_Y), shape = 3, color = "green", size = 3) +
# Projection lines
geom_segment(aes(x = X, y = Y, xend = proj_X, yend = proj_Y),
color = "gray", alpha = 0.5) +
# Annotations
geom_text(aes(x = (X + proj_X)/2, y = (Y + proj_Y)/2,
label = sprintf("%.1f", chainage)),
size = 3, vjust = -0.5) +
labs(title = "XY Projections onto Reference Line",
subtitle = "Chainage values shown in meters",
x = "X Coordinate",
y = "Y Coordinate") +
theme_minimal() +
coord_equal()
# 5. View results table
results <- xyz_data %>%
select(X, Y, proj_X, proj_Y, chainage)
print(results)
library(plotly)
plot_ly(xyz_data) %>%
add_markers(x = ~chainage, y = ~Z, z = ~sqrt((X-proj_X)^2 + (Y-proj_Y)^2),
color = ~Z, colors = terrain.colors(10)) %>%
layout(scene = list(xaxis = list(title = 'Chainage (m)'),
yaxis = list(title = 'Elevation (m)'),
zaxis = list(title = 'Deviation (m)')))
library(ggplot2)
# Create the plot
chainage_plot <- ggplot(xyz_data, aes(x = chainage, y = Z)) +
# Points colored by distance from reference line
geom_point(aes(color = sqrt((X-proj_X)^2 + (Y-proj_Y)^2)), size = 3) +
# Optional: Add a smoothed trend line
geom_smooth(method = "loess", se = FALSE, color = "red", linewidth = 1) +
# Color scale for deviations
scale_color_gradient(low = "blue", high = "orange",
name = "Deviation\nfrom line (m)") +
# Labels and theme
labs(title = "Longitudinal Profile",
subtitle = "Chainage along reference line vs. Elevation",
x = "Chainage from Start (m)",
y = "Elevation (Z)") +
theme_minimal() +
theme(legend.position = "right")
# Display plot
print(chainage_plot)
# Optional: Add vertical lines for significant points
chainage_plot +
geom_vline(xintercept = xyz_data$chainage[c(1, nrow(xyz_data))],
linetype = "dashed", color = "gray") +
annotate("text",
x = xyz_data$chainage[c(1, nrow(xyz_data))],
y = max(xyz_data$Z),
label = c("Start", "End"),
ggplot(xyz_data, aes(x = chainage, y = Z)) +
geom_line(color = "gray60", alpha = 0.7) +
geom_point(shape = 21, fill = "steelblue", color = "white", size = 3, stroke = 1) +
# Label every 50m chainage
geom_text(aes(label = ifelse(chainage %% 50 == 0, round(Z, 1), "")),
vjust = -1.2, size = 3, color = "black") +
scale_x_continuous(breaks = seq(0, max(xyz_data$chainage), by = 50)) +
labs(title = "Longitudinal Elevation Profile",
x = "Chainage (m)",
y = "Elevation (m)") +
theme_bw() +
theme(panel.grid.minor = element_blank())
save.image("C:\\Users\\HP15-ZBOOK\\OneDrive\\Desktop\\Read&PlotXYZ data")
# Load the package
library(scatterplot3d)
# Your data (with elevation added)
topo_data <- data.frame(
Easting = c(1572000, 1572050, 1572100, 1572150, 1572200,
1572250, 1572300, 1572350, 1572400, 1572450, 1572500),
Northing = c(5180000, 5180010, 5180020, 5180030, 5180040,
5180050, 5180100, 5180150, 5180180, 5180190, 5180200),
Elevation = c(125.5, 126.2, 126.8, 127.1, 127.5,
128.0, 128.5, 129.0, 129.5, 130.0, 130.2)
)
# Create 3D plot
s3d <- scatterplot3d(topo_data$Easting, topo_data$Northing, topo_data$Elevation,
type = "b",  # Both points and lines
color = "blue",
pch = 19,
xlab = "Easting (NZTM m)",
ylab = "Northing (NZTM m)",
zlab = "Elevation (m)",
main = "3D Topographic Profile")
# Add start/end markers
s3d$points3d(topo_data$Easting[c(1,11)],
topo_data$Northing[c(1,11)],
topo_data$Elevation[c(1,11)],
pch = c(17, 15),
col = c("green", "red"),
cex = 1.5)
# Add legend
legend("topleft",
legend = c("Profile", "Start", "End"),
pch = c(19, 17, 15),
col = c("blue", "green", "red"))
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
library(sp)
library(dplyr)
library(plotly)
# 1. Import the data
topo_data <- read.csv("topography.csv")
# Check for missing values (empty Z values)
sum(is.na(topo_data$Z))  # Count NA values
topo_data <- na.omit(topo_data)  # Remove rows with missing Z values
# 2. Basic visualization
# Scatter plot with elevation coloring
ggplot(topo_data, aes(x = X, y = Y, color = Z)) +
geom_point(size = 2) +
scale_color_gradientn(colors = terrain.colors(10)) +
coord_equal() +
labs(title = "Topographic Survey Points",
x = "Easting (m)", y = "Northing (m)",
color = "Elevation (m)")
# Calculate perpendicular distances from points to reference line
calculate_deviation_distance <- function(point, line_start, line_end) {
# Convert to numeric vectors
p <- as.numeric(point)
a <- as.numeric(line_start)
b <- as.numeric(line_end)
# Vector components
x1 <- a[1]; y1 <- a[2]
x2 <- b[1]; y2 <- b[2]
x0 <- p[1]; y0 <- p[2]
# Perpendicular distance formula
numerator <- abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1)
denominator <- sqrt((y2-y1)^2 + (x2-x1)^2)
distance <- numerator/denominator
return(distance)
}
# Calculate deviations for all points
deviation_distances <- apply(df_first10, 1, function(row) {
calculate_deviation_distance(row[c("Easting", "Northing")],
line_start, line_end)
})
# Calculate perpendicular distances from points to reference line
calculate_deviation_distance <- function(point, line_start, line_end) {
# Convert to numeric vectors
p <- as.numeric(point)
a <- as.numeric(line_start)
b <- as.numeric(line_end)
# Vector components
x1 <- a[1]; y1 <- a[2]
x2 <- b[1]; y2 <- b[2]
x0 <- p[1]; y0 <- p[2]
# Perpendicular distance formula
numerator <- abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1)
denominator <- sqrt((y2-y1)^2 + (x2-x1)^2)
distance <- numerator/denominator
return(distance)
}
# Calculate deviations for all points
deviation_distances <- apply(df_first10, 1, function(row) {
calculate_deviation_distance(row[c("Easting", "Northing")],
line_start, line_end)
})
# Calculate perpendicular distances from points to reference line
calculate_deviation_distance <- function(point, line_start, line_end) {
# Convert to numeric vectors
p <- as.numeric(point)
a <- as.numeric(line_start)
b <- as.numeric(line_end)
# Vector components
x1 <- a[1]; y1 <- a[2]
x2 <- b[1]; y2 <- b[2]
x0 <- p[1]; y0 <- p[2]
# Perpendicular distance formula
numerator <- abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1)
denominator <- sqrt((y2-y1)^2 + (x2-x1)^2)
distance <- numerator/denominator
return(distance)
}
# Calculate deviations for all points
deviation_distances <- apply(df_first10, 1, function(row) {
calculate_deviation_distance(row[c("Easting", "Northing")],
line_start, line_end)
})
